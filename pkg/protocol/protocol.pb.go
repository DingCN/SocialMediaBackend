// Code generated by protoc-gen-go. DO NOT EDIT.
// source: protocol.proto

package protocol

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type SignupRequest struct {
	Username string `protobuf:"bytes,1,opt,name=username" json:"username,omitempty"`
	Password string `protobuf:"bytes,2,opt,name=password" json:"password,omitempty"`
}

func (m *SignupRequest) Reset()                    { *m = SignupRequest{} }
func (m *SignupRequest) String() string            { return proto.CompactTextString(m) }
func (*SignupRequest) ProtoMessage()               {}
func (*SignupRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

func (m *SignupRequest) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *SignupRequest) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

type SignupReply struct {
	Username string `protobuf:"bytes,1,opt,name=username" json:"username,omitempty"`
	Success  bool   `protobuf:"varint,2,opt,name=success" json:"success,omitempty"`
}

func (m *SignupReply) Reset()                    { *m = SignupReply{} }
func (m *SignupReply) String() string            { return proto.CompactTextString(m) }
func (*SignupReply) ProtoMessage()               {}
func (*SignupReply) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

func (m *SignupReply) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *SignupReply) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

type LoginRequest struct {
	Username string `protobuf:"bytes,1,opt,name=username" json:"username,omitempty"`
	Password string `protobuf:"bytes,2,opt,name=password" json:"password,omitempty"`
}

func (m *LoginRequest) Reset()                    { *m = LoginRequest{} }
func (m *LoginRequest) String() string            { return proto.CompactTextString(m) }
func (*LoginRequest) ProtoMessage()               {}
func (*LoginRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{2} }

func (m *LoginRequest) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *LoginRequest) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

type LoginReply struct {
	Username string `protobuf:"bytes,1,opt,name=username" json:"username,omitempty"`
	Success  bool   `protobuf:"varint,2,opt,name=success" json:"success,omitempty"`
}

func (m *LoginReply) Reset()                    { *m = LoginReply{} }
func (m *LoginReply) String() string            { return proto.CompactTextString(m) }
func (*LoginReply) ProtoMessage()               {}
func (*LoginReply) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{3} }

func (m *LoginReply) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *LoginReply) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

type FollowUnFollowRequest struct {
	Username   string `protobuf:"bytes,1,opt,name=username" json:"username,omitempty"`
	Targetname string `protobuf:"bytes,2,opt,name=targetname" json:"targetname,omitempty"`
}

func (m *FollowUnFollowRequest) Reset()                    { *m = FollowUnFollowRequest{} }
func (m *FollowUnFollowRequest) String() string            { return proto.CompactTextString(m) }
func (*FollowUnFollowRequest) ProtoMessage()               {}
func (*FollowUnFollowRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{4} }

func (m *FollowUnFollowRequest) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *FollowUnFollowRequest) GetTargetname() string {
	if m != nil {
		return m.Targetname
	}
	return ""
}

type FollowUnFollowReply struct {
	Username   string `protobuf:"bytes,1,opt,name=username" json:"username,omitempty"`
	Targetname string `protobuf:"bytes,2,opt,name=targetname" json:"targetname,omitempty"`
	Success    bool   `protobuf:"varint,3,opt,name=success" json:"success,omitempty"`
}

func (m *FollowUnFollowReply) Reset()                    { *m = FollowUnFollowReply{} }
func (m *FollowUnFollowReply) String() string            { return proto.CompactTextString(m) }
func (*FollowUnFollowReply) ProtoMessage()               {}
func (*FollowUnFollowReply) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{5} }

func (m *FollowUnFollowReply) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *FollowUnFollowReply) GetTargetname() string {
	if m != nil {
		return m.Targetname
	}
	return ""
}

func (m *FollowUnFollowReply) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

type AddTweetRequest struct {
	Username string `protobuf:"bytes,1,opt,name=username" json:"username,omitempty"`
	Post     string `protobuf:"bytes,2,opt,name=post" json:"post,omitempty"`
}

func (m *AddTweetRequest) Reset()                    { *m = AddTweetRequest{} }
func (m *AddTweetRequest) String() string            { return proto.CompactTextString(m) }
func (*AddTweetRequest) ProtoMessage()               {}
func (*AddTweetRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{6} }

func (m *AddTweetRequest) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *AddTweetRequest) GetPost() string {
	if m != nil {
		return m.Post
	}
	return ""
}

type AddTweetReply struct {
	Username string `protobuf:"bytes,1,opt,name=username" json:"username,omitempty"`
	Success  bool   `protobuf:"varint,2,opt,name=success" json:"success,omitempty"`
}

func (m *AddTweetReply) Reset()                    { *m = AddTweetReply{} }
func (m *AddTweetReply) String() string            { return proto.CompactTextString(m) }
func (*AddTweetReply) ProtoMessage()               {}
func (*AddTweetReply) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{7} }

func (m *AddTweetReply) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *AddTweetReply) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

type GetFollowingTweetsRequest struct {
	Username string `protobuf:"bytes,1,opt,name=username" json:"username,omitempty"`
}

func (m *GetFollowingTweetsRequest) Reset()                    { *m = GetFollowingTweetsRequest{} }
func (m *GetFollowingTweetsRequest) String() string            { return proto.CompactTextString(m) }
func (*GetFollowingTweetsRequest) ProtoMessage()               {}
func (*GetFollowingTweetsRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{8} }

func (m *GetFollowingTweetsRequest) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

type GetFollowingTweetsReply struct {
	Username string   `protobuf:"bytes,1,opt,name=username" json:"username,omitempty"`
	Tweet    []*Tweet `protobuf:"bytes,2,rep,name=tweet" json:"tweet,omitempty"`
	Success  bool     `protobuf:"varint,3,opt,name=success" json:"success,omitempty"`
}

func (m *GetFollowingTweetsReply) Reset()                    { *m = GetFollowingTweetsReply{} }
func (m *GetFollowingTweetsReply) String() string            { return proto.CompactTextString(m) }
func (*GetFollowingTweetsReply) ProtoMessage()               {}
func (*GetFollowingTweetsReply) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{9} }

func (m *GetFollowingTweetsReply) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *GetFollowingTweetsReply) GetTweet() []*Tweet {
	if m != nil {
		return m.Tweet
	}
	return nil
}

func (m *GetFollowingTweetsReply) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

type Tweet struct {
	UserName  string     `protobuf:"bytes,1,opt,name=UserName,json=userName" json:"UserName,omitempty"`
	Timestamp *Timestamp `protobuf:"bytes,2,opt,name=Timestamp,json=timestamp" json:"Timestamp,omitempty"`
	Body      string     `protobuf:"bytes,3,opt,name=Body,json=body" json:"Body,omitempty"`
}

func (m *Tweet) Reset()                    { *m = Tweet{} }
func (m *Tweet) String() string            { return proto.CompactTextString(m) }
func (*Tweet) ProtoMessage()               {}
func (*Tweet) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{10} }

func (m *Tweet) GetUserName() string {
	if m != nil {
		return m.UserName
	}
	return ""
}

func (m *Tweet) GetTimestamp() *Timestamp {
	if m != nil {
		return m.Timestamp
	}
	return nil
}

func (m *Tweet) GetBody() string {
	if m != nil {
		return m.Body
	}
	return ""
}

type Timestamp struct {
	// Represents seconds of UTC time since Unix epoch
	// 1970-01-01T00:00:00Z. Must be from 0001-01-01T00:00:00Z to
	// 9999-12-31T23:59:59Z inclusive.
	Seconds int64 `protobuf:"varint,1,opt,name=seconds" json:"seconds,omitempty"`
	// Non-negative fractions of a second at nanosecond resolution. Negative
	// second values with fractions must still have non-negative nanos values
	// that count forward in time. Must be from 0 to 999,999,999
	// inclusive.
	Nanos int32 `protobuf:"varint,2,opt,name=nanos" json:"nanos,omitempty"`
}

func (m *Timestamp) Reset()                    { *m = Timestamp{} }
func (m *Timestamp) String() string            { return proto.CompactTextString(m) }
func (*Timestamp) ProtoMessage()               {}
func (*Timestamp) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{11} }

func (m *Timestamp) GetSeconds() int64 {
	if m != nil {
		return m.Seconds
	}
	return 0
}

func (m *Timestamp) GetNanos() int32 {
	if m != nil {
		return m.Nanos
	}
	return 0
}

type GetUserProfileRequest struct {
	Username string `protobuf:"bytes,1,opt,name=username" json:"username,omitempty"`
}

func (m *GetUserProfileRequest) Reset()                    { *m = GetUserProfileRequest{} }
func (m *GetUserProfileRequest) String() string            { return proto.CompactTextString(m) }
func (*GetUserProfileRequest) ProtoMessage()               {}
func (*GetUserProfileRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{12} }

func (m *GetUserProfileRequest) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

type GetUserProfileReply struct {
	Username      string   `protobuf:"bytes,1,opt,name=username" json:"username,omitempty"`
	TweetList     []*Tweet `protobuf:"bytes,2,rep,name=tweetList" json:"tweetList,omitempty"`
	FollowingList []string `protobuf:"bytes,3,rep,name=followingList" json:"followingList,omitempty"`
	FollowerList  []string `protobuf:"bytes,4,rep,name=followerList" json:"followerList,omitempty"`
	Success       bool     `protobuf:"varint,5,opt,name=success" json:"success,omitempty"`
}

func (m *GetUserProfileReply) Reset()                    { *m = GetUserProfileReply{} }
func (m *GetUserProfileReply) String() string            { return proto.CompactTextString(m) }
func (*GetUserProfileReply) ProtoMessage()               {}
func (*GetUserProfileReply) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{13} }

func (m *GetUserProfileReply) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *GetUserProfileReply) GetTweetList() []*Tweet {
	if m != nil {
		return m.TweetList
	}
	return nil
}

func (m *GetUserProfileReply) GetFollowingList() []string {
	if m != nil {
		return m.FollowingList
	}
	return nil
}

func (m *GetUserProfileReply) GetFollowerList() []string {
	if m != nil {
		return m.FollowerList
	}
	return nil
}

func (m *GetUserProfileReply) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

type MomentRandomFeedsRequest struct {
}

func (m *MomentRandomFeedsRequest) Reset()                    { *m = MomentRandomFeedsRequest{} }
func (m *MomentRandomFeedsRequest) String() string            { return proto.CompactTextString(m) }
func (*MomentRandomFeedsRequest) ProtoMessage()               {}
func (*MomentRandomFeedsRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{14} }

type MomentRandomFeedsReply struct {
	TweetList []*Tweet `protobuf:"bytes,1,rep,name=tweetList" json:"tweetList,omitempty"`
	Success   bool     `protobuf:"varint,2,opt,name=success" json:"success,omitempty"`
}

func (m *MomentRandomFeedsReply) Reset()                    { *m = MomentRandomFeedsReply{} }
func (m *MomentRandomFeedsReply) String() string            { return proto.CompactTextString(m) }
func (*MomentRandomFeedsReply) ProtoMessage()               {}
func (*MomentRandomFeedsReply) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{15} }

func (m *MomentRandomFeedsReply) GetTweetList() []*Tweet {
	if m != nil {
		return m.TweetList
	}
	return nil
}

func (m *MomentRandomFeedsReply) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

type CheckIfFollowingRequest struct {
	Username   string `protobuf:"bytes,1,opt,name=username" json:"username,omitempty"`
	Targetname string `protobuf:"bytes,2,opt,name=targetname" json:"targetname,omitempty"`
}

func (m *CheckIfFollowingRequest) Reset()                    { *m = CheckIfFollowingRequest{} }
func (m *CheckIfFollowingRequest) String() string            { return proto.CompactTextString(m) }
func (*CheckIfFollowingRequest) ProtoMessage()               {}
func (*CheckIfFollowingRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{16} }

func (m *CheckIfFollowingRequest) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *CheckIfFollowingRequest) GetTargetname() string {
	if m != nil {
		return m.Targetname
	}
	return ""
}

type CheckIfFollowingReply struct {
	IsFollowing bool `protobuf:"varint,1,opt,name=IsFollowing,json=isFollowing" json:"IsFollowing,omitempty"`
}

func (m *CheckIfFollowingReply) Reset()                    { *m = CheckIfFollowingReply{} }
func (m *CheckIfFollowingReply) String() string            { return proto.CompactTextString(m) }
func (*CheckIfFollowingReply) ProtoMessage()               {}
func (*CheckIfFollowingReply) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{17} }

func (m *CheckIfFollowingReply) GetIsFollowing() bool {
	if m != nil {
		return m.IsFollowing
	}
	return false
}

func init() {
	proto.RegisterType((*SignupRequest)(nil), "protocol.SignupRequest")
	proto.RegisterType((*SignupReply)(nil), "protocol.SignupReply")
	proto.RegisterType((*LoginRequest)(nil), "protocol.LoginRequest")
	proto.RegisterType((*LoginReply)(nil), "protocol.LoginReply")
	proto.RegisterType((*FollowUnFollowRequest)(nil), "protocol.FollowUnFollowRequest")
	proto.RegisterType((*FollowUnFollowReply)(nil), "protocol.FollowUnFollowReply")
	proto.RegisterType((*AddTweetRequest)(nil), "protocol.AddTweetRequest")
	proto.RegisterType((*AddTweetReply)(nil), "protocol.AddTweetReply")
	proto.RegisterType((*GetFollowingTweetsRequest)(nil), "protocol.GetFollowingTweetsRequest")
	proto.RegisterType((*GetFollowingTweetsReply)(nil), "protocol.GetFollowingTweetsReply")
	proto.RegisterType((*Tweet)(nil), "protocol.Tweet")
	proto.RegisterType((*Timestamp)(nil), "protocol.Timestamp")
	proto.RegisterType((*GetUserProfileRequest)(nil), "protocol.GetUserProfileRequest")
	proto.RegisterType((*GetUserProfileReply)(nil), "protocol.GetUserProfileReply")
	proto.RegisterType((*MomentRandomFeedsRequest)(nil), "protocol.MomentRandomFeedsRequest")
	proto.RegisterType((*MomentRandomFeedsReply)(nil), "protocol.MomentRandomFeedsReply")
	proto.RegisterType((*CheckIfFollowingRequest)(nil), "protocol.CheckIfFollowingRequest")
	proto.RegisterType((*CheckIfFollowingReply)(nil), "protocol.CheckIfFollowingReply")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for TwitterRPC service

type TwitterRPCClient interface {
	SignupRPC(ctx context.Context, in *SignupRequest, opts ...grpc.CallOption) (*SignupReply, error)
	LoginRPC(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginReply, error)
	FollowUnFollowRPC(ctx context.Context, in *FollowUnFollowRequest, opts ...grpc.CallOption) (*FollowUnFollowReply, error)
	AddTweetRPC(ctx context.Context, in *AddTweetRequest, opts ...grpc.CallOption) (*AddTweetReply, error)
	GetFollowingTweetsRPC(ctx context.Context, in *GetFollowingTweetsRequest, opts ...grpc.CallOption) (*GetFollowingTweetsReply, error)
	GetUserProfileRPC(ctx context.Context, in *GetUserProfileRequest, opts ...grpc.CallOption) (*GetUserProfileReply, error)
	MomentRandomFeedsRPC(ctx context.Context, in *MomentRandomFeedsRequest, opts ...grpc.CallOption) (*MomentRandomFeedsReply, error)
	CheckIfFollowingRPC(ctx context.Context, in *CheckIfFollowingRequest, opts ...grpc.CallOption) (*CheckIfFollowingReply, error)
}

type twitterRPCClient struct {
	cc *grpc.ClientConn
}

func NewTwitterRPCClient(cc *grpc.ClientConn) TwitterRPCClient {
	return &twitterRPCClient{cc}
}

func (c *twitterRPCClient) SignupRPC(ctx context.Context, in *SignupRequest, opts ...grpc.CallOption) (*SignupReply, error) {
	out := new(SignupReply)
	err := grpc.Invoke(ctx, "/protocol.TwitterRPC/SignupRPC", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *twitterRPCClient) LoginRPC(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginReply, error) {
	out := new(LoginReply)
	err := grpc.Invoke(ctx, "/protocol.TwitterRPC/LoginRPC", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *twitterRPCClient) FollowUnFollowRPC(ctx context.Context, in *FollowUnFollowRequest, opts ...grpc.CallOption) (*FollowUnFollowReply, error) {
	out := new(FollowUnFollowReply)
	err := grpc.Invoke(ctx, "/protocol.TwitterRPC/FollowUnFollowRPC", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *twitterRPCClient) AddTweetRPC(ctx context.Context, in *AddTweetRequest, opts ...grpc.CallOption) (*AddTweetReply, error) {
	out := new(AddTweetReply)
	err := grpc.Invoke(ctx, "/protocol.TwitterRPC/AddTweetRPC", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *twitterRPCClient) GetFollowingTweetsRPC(ctx context.Context, in *GetFollowingTweetsRequest, opts ...grpc.CallOption) (*GetFollowingTweetsReply, error) {
	out := new(GetFollowingTweetsReply)
	err := grpc.Invoke(ctx, "/protocol.TwitterRPC/GetFollowingTweetsRPC", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *twitterRPCClient) GetUserProfileRPC(ctx context.Context, in *GetUserProfileRequest, opts ...grpc.CallOption) (*GetUserProfileReply, error) {
	out := new(GetUserProfileReply)
	err := grpc.Invoke(ctx, "/protocol.TwitterRPC/GetUserProfileRPC", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *twitterRPCClient) MomentRandomFeedsRPC(ctx context.Context, in *MomentRandomFeedsRequest, opts ...grpc.CallOption) (*MomentRandomFeedsReply, error) {
	out := new(MomentRandomFeedsReply)
	err := grpc.Invoke(ctx, "/protocol.TwitterRPC/MomentRandomFeedsRPC", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *twitterRPCClient) CheckIfFollowingRPC(ctx context.Context, in *CheckIfFollowingRequest, opts ...grpc.CallOption) (*CheckIfFollowingReply, error) {
	out := new(CheckIfFollowingReply)
	err := grpc.Invoke(ctx, "/protocol.TwitterRPC/CheckIfFollowingRPC", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for TwitterRPC service

type TwitterRPCServer interface {
	SignupRPC(context.Context, *SignupRequest) (*SignupReply, error)
	LoginRPC(context.Context, *LoginRequest) (*LoginReply, error)
	FollowUnFollowRPC(context.Context, *FollowUnFollowRequest) (*FollowUnFollowReply, error)
	AddTweetRPC(context.Context, *AddTweetRequest) (*AddTweetReply, error)
	GetFollowingTweetsRPC(context.Context, *GetFollowingTweetsRequest) (*GetFollowingTweetsReply, error)
	GetUserProfileRPC(context.Context, *GetUserProfileRequest) (*GetUserProfileReply, error)
	MomentRandomFeedsRPC(context.Context, *MomentRandomFeedsRequest) (*MomentRandomFeedsReply, error)
	CheckIfFollowingRPC(context.Context, *CheckIfFollowingRequest) (*CheckIfFollowingReply, error)
}

func RegisterTwitterRPCServer(s *grpc.Server, srv TwitterRPCServer) {
	s.RegisterService(&_TwitterRPC_serviceDesc, srv)
}

func _TwitterRPC_SignupRPC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TwitterRPCServer).SignupRPC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.TwitterRPC/SignupRPC",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TwitterRPCServer).SignupRPC(ctx, req.(*SignupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TwitterRPC_LoginRPC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TwitterRPCServer).LoginRPC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.TwitterRPC/LoginRPC",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TwitterRPCServer).LoginRPC(ctx, req.(*LoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TwitterRPC_FollowUnFollowRPC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FollowUnFollowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TwitterRPCServer).FollowUnFollowRPC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.TwitterRPC/FollowUnFollowRPC",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TwitterRPCServer).FollowUnFollowRPC(ctx, req.(*FollowUnFollowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TwitterRPC_AddTweetRPC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddTweetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TwitterRPCServer).AddTweetRPC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.TwitterRPC/AddTweetRPC",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TwitterRPCServer).AddTweetRPC(ctx, req.(*AddTweetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TwitterRPC_GetFollowingTweetsRPC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFollowingTweetsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TwitterRPCServer).GetFollowingTweetsRPC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.TwitterRPC/GetFollowingTweetsRPC",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TwitterRPCServer).GetFollowingTweetsRPC(ctx, req.(*GetFollowingTweetsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TwitterRPC_GetUserProfileRPC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TwitterRPCServer).GetUserProfileRPC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.TwitterRPC/GetUserProfileRPC",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TwitterRPCServer).GetUserProfileRPC(ctx, req.(*GetUserProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TwitterRPC_MomentRandomFeedsRPC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MomentRandomFeedsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TwitterRPCServer).MomentRandomFeedsRPC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.TwitterRPC/MomentRandomFeedsRPC",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TwitterRPCServer).MomentRandomFeedsRPC(ctx, req.(*MomentRandomFeedsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TwitterRPC_CheckIfFollowingRPC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckIfFollowingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TwitterRPCServer).CheckIfFollowingRPC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.TwitterRPC/CheckIfFollowingRPC",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TwitterRPCServer).CheckIfFollowingRPC(ctx, req.(*CheckIfFollowingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _TwitterRPC_serviceDesc = grpc.ServiceDesc{
	ServiceName: "protocol.TwitterRPC",
	HandlerType: (*TwitterRPCServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SignupRPC",
			Handler:    _TwitterRPC_SignupRPC_Handler,
		},
		{
			MethodName: "LoginRPC",
			Handler:    _TwitterRPC_LoginRPC_Handler,
		},
		{
			MethodName: "FollowUnFollowRPC",
			Handler:    _TwitterRPC_FollowUnFollowRPC_Handler,
		},
		{
			MethodName: "AddTweetRPC",
			Handler:    _TwitterRPC_AddTweetRPC_Handler,
		},
		{
			MethodName: "GetFollowingTweetsRPC",
			Handler:    _TwitterRPC_GetFollowingTweetsRPC_Handler,
		},
		{
			MethodName: "GetUserProfileRPC",
			Handler:    _TwitterRPC_GetUserProfileRPC_Handler,
		},
		{
			MethodName: "MomentRandomFeedsRPC",
			Handler:    _TwitterRPC_MomentRandomFeedsRPC_Handler,
		},
		{
			MethodName: "CheckIfFollowingRPC",
			Handler:    _TwitterRPC_CheckIfFollowingRPC_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protocol.proto",
}

func init() { proto.RegisterFile("protocol.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 653 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x54, 0xdd, 0x6e, 0xd3, 0x4c,
	0x10, 0x6d, 0x9a, 0xfa, 0xfb, 0xe2, 0x71, 0x4b, 0xc5, 0xa6, 0x69, 0x52, 0x4b, 0xd0, 0xb0, 0x80,
	0xd4, 0x1b, 0x2a, 0xd1, 0x5e, 0x20, 0x40, 0x5c, 0xb4, 0x16, 0x8d, 0x2a, 0x15, 0x64, 0xb9, 0xc9,
	0x15, 0x12, 0x92, 0x1b, 0x6f, 0x82, 0xa9, 0xe3, 0x35, 0xde, 0x0d, 0x51, 0x5e, 0x85, 0xe7, 0xe1,
	0xc1, 0x90, 0x77, 0xe3, 0xdf, 0xd8, 0x49, 0x54, 0xb8, 0xb2, 0x67, 0xe6, 0xec, 0x99, 0x39, 0xb3,
	0xb3, 0x03, 0x8f, 0x82, 0x90, 0x72, 0x3a, 0xa4, 0xde, 0xa9, 0xf8, 0x41, 0x8d, 0xd8, 0xc6, 0x3d,
	0xd8, 0xbb, 0x75, 0xc7, 0xfe, 0x34, 0xb0, 0xc8, 0x8f, 0x29, 0x61, 0x1c, 0xe9, 0xd0, 0x98, 0x32,
	0x12, 0xfa, 0xf6, 0x84, 0x74, 0x6a, 0xdd, 0xda, 0x89, 0x6a, 0x25, 0x76, 0x14, 0x0b, 0x6c, 0xc6,
	0x66, 0x34, 0x74, 0x3a, 0xdb, 0x32, 0x16, 0xdb, 0xd8, 0x00, 0x2d, 0x26, 0x0a, 0xbc, 0xf9, 0x4a,
	0x9a, 0x0e, 0xfc, 0xcf, 0xa6, 0xc3, 0x21, 0x61, 0x4c, 0xb0, 0x34, 0xac, 0xd8, 0xc4, 0x57, 0xb0,
	0x7b, 0x43, 0xc7, 0xae, 0xff, 0xb7, 0xc5, 0x5c, 0x02, 0x2c, 0x78, 0x1e, 0x5e, 0xcb, 0x2d, 0xb4,
	0xae, 0xa8, 0xe7, 0xd1, 0xd9, 0xc0, 0x97, 0xdf, 0x4d, 0x8a, 0x7a, 0x0a, 0xc0, 0xed, 0x70, 0x4c,
	0xb8, 0x88, 0xca, 0xb2, 0x32, 0x1e, 0x7c, 0x0f, 0xcd, 0x22, 0xe9, 0xba, 0x0a, 0xd7, 0x50, 0x66,
	0x15, 0xd4, 0xf3, 0x0a, 0x2e, 0x60, 0xff, 0xc2, 0x71, 0xfa, 0x33, 0x42, 0xf8, 0x26, 0xb5, 0x23,
	0xd8, 0x09, 0x28, 0xe3, 0x8b, 0x14, 0xe2, 0x1f, 0x7f, 0x84, 0xbd, 0x94, 0xe2, 0xe1, 0xbd, 0x7c,
	0x03, 0x47, 0x3d, 0xc2, 0xa5, 0x62, 0xd7, 0x1f, 0x0b, 0x3e, 0xb6, 0x41, 0x4d, 0xf8, 0x27, 0xb4,
	0xcb, 0x0e, 0xae, 0xab, 0xe4, 0x25, 0x28, 0x3c, 0x82, 0x76, 0xb6, 0xbb, 0xf5, 0x13, 0xed, 0x6c,
	0xff, 0x34, 0x99, 0x7f, 0x29, 0x45, 0x46, 0x57, 0xb4, 0xee, 0x3b, 0x28, 0x02, 0x19, 0x65, 0x19,
	0x30, 0x12, 0x7e, 0x2e, 0x64, 0x89, 0x6c, 0xf4, 0x1a, 0xd4, 0xbe, 0x3b, 0x21, 0x8c, 0xdb, 0x93,
	0x40, 0x28, 0xd6, 0xce, 0x9a, 0x99, 0x4c, 0x71, 0xc8, 0x52, 0x79, 0xfc, 0x1b, 0xf5, 0xf8, 0x92,
	0x3a, 0x73, 0x91, 0x4e, 0xb5, 0x76, 0xee, 0xa8, 0x33, 0xc7, 0xef, 0x33, 0x34, 0xa2, 0x24, 0x32,
	0xa4, 0xbe, 0xc3, 0x44, 0xba, 0xba, 0x15, 0x9b, 0xe8, 0x00, 0x14, 0xdf, 0xf6, 0xa9, 0xec, 0xad,
	0x62, 0x49, 0x03, 0x9f, 0x43, 0xab, 0x47, 0x78, 0x54, 0xa2, 0x19, 0xd2, 0x91, 0xeb, 0x91, 0x4d,
	0xba, 0xfa, 0xbb, 0x06, 0xcd, 0xe2, 0xa9, 0x75, 0x2d, 0x7d, 0x05, 0xaa, 0x68, 0xda, 0x8d, 0xcb,
	0x2a, 0xdb, 0x9a, 0x22, 0xd0, 0x0b, 0xd8, 0x1b, 0xc5, 0xb7, 0x26, 0x8e, 0xd4, 0xbb, 0xf5, 0x13,
	0xd5, 0xca, 0x3b, 0x11, 0x86, 0x5d, 0xe9, 0x20, 0xa1, 0x00, 0xed, 0x08, 0x50, 0xce, 0x97, 0xbd,
	0x24, 0x25, 0x7f, 0x49, 0x3a, 0x74, 0x3e, 0xd1, 0x09, 0xf1, 0xb9, 0x65, 0xfb, 0x0e, 0x9d, 0x5c,
	0x11, 0xe2, 0xc4, 0x43, 0x85, 0x6d, 0x38, 0x2c, 0x89, 0x45, 0x22, 0x73, 0x42, 0x6a, 0x6b, 0x85,
	0x54, 0x0f, 0xf5, 0x00, 0xda, 0xc6, 0x37, 0x32, 0xbc, 0xbf, 0x1e, 0x25, 0xf3, 0xf9, 0x2f, 0x56,
	0xc4, 0x5b, 0x68, 0x2d, 0xd3, 0x46, 0x85, 0x77, 0x41, 0xbb, 0x66, 0x89, 0x4f, 0xf0, 0x36, 0x2c,
	0xcd, 0x4d, 0x5d, 0x67, 0xbf, 0x14, 0x80, 0xfe, 0xcc, 0xe5, 0x9c, 0x84, 0x96, 0x69, 0xa0, 0x0f,
	0xa0, 0x2e, 0x56, 0xb2, 0x69, 0xa0, 0x76, 0xaa, 0x31, 0xb7, 0xf0, 0xf5, 0xd6, 0x72, 0x20, 0xf0,
	0xe6, 0x78, 0x0b, 0xbd, 0x83, 0x86, 0x5c, 0xa2, 0xa6, 0x81, 0x0e, 0x53, 0x50, 0x76, 0x41, 0xeb,
	0x07, 0x4b, 0x7e, 0x79, 0x76, 0x00, 0x8f, 0x0b, 0x7b, 0xce, 0x34, 0xd0, 0x71, 0x0a, 0x2e, 0xdd,
	0xac, 0xfa, 0x93, 0x6a, 0x80, 0xa4, 0x35, 0x40, 0x4b, 0xd6, 0x91, 0x69, 0xa0, 0xa3, 0x14, 0x5f,
	0x58, 0x74, 0x7a, 0xbb, 0x2c, 0x24, 0x49, 0x6c, 0xf1, 0x64, 0x8a, 0x3b, 0xc5, 0x34, 0xd0, 0xf3,
	0xf4, 0x4c, 0xe5, 0xb6, 0xd2, 0x9f, 0xad, 0x06, 0x25, 0xf2, 0x0b, 0xef, 0x2b, 0x2f, 0xbf, 0xf4,
	0xc9, 0x66, 0xe5, 0x97, 0xbc, 0x4e, 0xbc, 0x85, 0xbe, 0xc2, 0xc1, 0xf2, 0x50, 0x9b, 0x06, 0xc2,
	0xe9, 0xc1, 0xaa, 0x07, 0xa1, 0x77, 0x57, 0x62, 0x24, 0xff, 0x17, 0x68, 0x2e, 0x8d, 0x9e, 0x69,
	0xa0, 0x8c, 0xe4, 0x8a, 0x81, 0xd7, 0x8f, 0x57, 0x41, 0x04, 0xf9, 0xdd, 0x7f, 0x02, 0x71, 0xfe,
	0x27, 0x00, 0x00, 0xff, 0xff, 0xa8, 0x2b, 0x95, 0x16, 0x8c, 0x08, 0x00, 0x00,
}
