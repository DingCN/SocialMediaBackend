// Code generated by protoc-gen-go. DO NOT EDIT.
// source: protocol.proto

/*
Package protocol is a generated protocol buffer package.

It is generated from these files:
	protocol.proto

It has these top-level messages:
	SignupRequest
	SignupReply
	LoginRequest
	LoginReply
	FollowUnFollowRequest
	FollowUnFollowReply
	AddTweetRequest
	AddTweetReply
*/
package protocol

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type SignupRequest struct {
	Username string `protobuf:"bytes,1,opt,name=username" json:"username,omitempty"`
	Password string `protobuf:"bytes,2,opt,name=password" json:"password,omitempty"`
}

func (m *SignupRequest) Reset()                    { *m = SignupRequest{} }
func (m *SignupRequest) String() string            { return proto.CompactTextString(m) }
func (*SignupRequest) ProtoMessage()               {}
func (*SignupRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *SignupRequest) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *SignupRequest) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

type SignupReply struct {
	Username string `protobuf:"bytes,1,opt,name=username" json:"username,omitempty"`
	Success  bool   `protobuf:"varint,2,opt,name=success" json:"success,omitempty"`
}

func (m *SignupReply) Reset()                    { *m = SignupReply{} }
func (m *SignupReply) String() string            { return proto.CompactTextString(m) }
func (*SignupReply) ProtoMessage()               {}
func (*SignupReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *SignupReply) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *SignupReply) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

type LoginRequest struct {
	Username string `protobuf:"bytes,1,opt,name=username" json:"username,omitempty"`
	Password string `protobuf:"bytes,2,opt,name=password" json:"password,omitempty"`
}

func (m *LoginRequest) Reset()                    { *m = LoginRequest{} }
func (m *LoginRequest) String() string            { return proto.CompactTextString(m) }
func (*LoginRequest) ProtoMessage()               {}
func (*LoginRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *LoginRequest) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *LoginRequest) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

type LoginReply struct {
	Username string `protobuf:"bytes,1,opt,name=username" json:"username,omitempty"`
	Success  bool   `protobuf:"varint,2,opt,name=success" json:"success,omitempty"`
}

func (m *LoginReply) Reset()                    { *m = LoginReply{} }
func (m *LoginReply) String() string            { return proto.CompactTextString(m) }
func (*LoginReply) ProtoMessage()               {}
func (*LoginReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *LoginReply) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *LoginReply) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

type FollowUnFollowRequest struct {
	Username   string `protobuf:"bytes,1,opt,name=username" json:"username,omitempty"`
	Targetname string `protobuf:"bytes,2,opt,name=targetname" json:"targetname,omitempty"`
}

func (m *FollowUnFollowRequest) Reset()                    { *m = FollowUnFollowRequest{} }
func (m *FollowUnFollowRequest) String() string            { return proto.CompactTextString(m) }
func (*FollowUnFollowRequest) ProtoMessage()               {}
func (*FollowUnFollowRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *FollowUnFollowRequest) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *FollowUnFollowRequest) GetTargetname() string {
	if m != nil {
		return m.Targetname
	}
	return ""
}

type FollowUnFollowReply struct {
	Username   string `protobuf:"bytes,1,opt,name=username" json:"username,omitempty"`
	Targetname string `protobuf:"bytes,2,opt,name=targetname" json:"targetname,omitempty"`
	Success    bool   `protobuf:"varint,3,opt,name=success" json:"success,omitempty"`
}

func (m *FollowUnFollowReply) Reset()                    { *m = FollowUnFollowReply{} }
func (m *FollowUnFollowReply) String() string            { return proto.CompactTextString(m) }
func (*FollowUnFollowReply) ProtoMessage()               {}
func (*FollowUnFollowReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *FollowUnFollowReply) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *FollowUnFollowReply) GetTargetname() string {
	if m != nil {
		return m.Targetname
	}
	return ""
}

func (m *FollowUnFollowReply) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

type AddTweetRequest struct {
	Username string `protobuf:"bytes,1,opt,name=username" json:"username,omitempty"`
	Post     string `protobuf:"bytes,2,opt,name=post" json:"post,omitempty"`
}

func (m *AddTweetRequest) Reset()                    { *m = AddTweetRequest{} }
func (m *AddTweetRequest) String() string            { return proto.CompactTextString(m) }
func (*AddTweetRequest) ProtoMessage()               {}
func (*AddTweetRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *AddTweetRequest) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *AddTweetRequest) GetPost() string {
	if m != nil {
		return m.Post
	}
	return ""
}

type AddTweetReply struct {
	Username string `protobuf:"bytes,1,opt,name=username" json:"username,omitempty"`
	Success  bool   `protobuf:"varint,2,opt,name=success" json:"success,omitempty"`
}

func (m *AddTweetReply) Reset()                    { *m = AddTweetReply{} }
func (m *AddTweetReply) String() string            { return proto.CompactTextString(m) }
func (*AddTweetReply) ProtoMessage()               {}
func (*AddTweetReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *AddTweetReply) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *AddTweetReply) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func init() {
	proto.RegisterType((*SignupRequest)(nil), "protocol.SignupRequest")
	proto.RegisterType((*SignupReply)(nil), "protocol.SignupReply")
	proto.RegisterType((*LoginRequest)(nil), "protocol.LoginRequest")
	proto.RegisterType((*LoginReply)(nil), "protocol.LoginReply")
	proto.RegisterType((*FollowUnFollowRequest)(nil), "protocol.FollowUnFollowRequest")
	proto.RegisterType((*FollowUnFollowReply)(nil), "protocol.FollowUnFollowReply")
	proto.RegisterType((*AddTweetRequest)(nil), "protocol.AddTweetRequest")
	proto.RegisterType((*AddTweetReply)(nil), "protocol.AddTweetReply")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for TwitterRPC service

type TwitterRPCClient interface {
	SignupRPC(ctx context.Context, in *SignupRequest, opts ...grpc.CallOption) (*SignupReply, error)
	LoginRPC(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginReply, error)
	FollowUnFollowRPC(ctx context.Context, in *FollowUnFollowRequest, opts ...grpc.CallOption) (*FollowUnFollowReply, error)
	AddTweetRPC(ctx context.Context, in *AddTweetRequest, opts ...grpc.CallOption) (*AddTweetReply, error)
}

type twitterRPCClient struct {
	cc *grpc.ClientConn
}

func NewTwitterRPCClient(cc *grpc.ClientConn) TwitterRPCClient {
	return &twitterRPCClient{cc}
}

func (c *twitterRPCClient) SignupRPC(ctx context.Context, in *SignupRequest, opts ...grpc.CallOption) (*SignupReply, error) {
	out := new(SignupReply)
	err := grpc.Invoke(ctx, "/protocol.TwitterRPC/SignupRPC", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *twitterRPCClient) LoginRPC(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginReply, error) {
	out := new(LoginReply)
	err := grpc.Invoke(ctx, "/protocol.TwitterRPC/LoginRPC", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *twitterRPCClient) FollowUnFollowRPC(ctx context.Context, in *FollowUnFollowRequest, opts ...grpc.CallOption) (*FollowUnFollowReply, error) {
	out := new(FollowUnFollowReply)
	err := grpc.Invoke(ctx, "/protocol.TwitterRPC/FollowUnFollowRPC", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *twitterRPCClient) AddTweetRPC(ctx context.Context, in *AddTweetRequest, opts ...grpc.CallOption) (*AddTweetReply, error) {
	out := new(AddTweetReply)
	err := grpc.Invoke(ctx, "/protocol.TwitterRPC/AddTweetRPC", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for TwitterRPC service

type TwitterRPCServer interface {
	SignupRPC(context.Context, *SignupRequest) (*SignupReply, error)
	LoginRPC(context.Context, *LoginRequest) (*LoginReply, error)
	FollowUnFollowRPC(context.Context, *FollowUnFollowRequest) (*FollowUnFollowReply, error)
	AddTweetRPC(context.Context, *AddTweetRequest) (*AddTweetReply, error)
}

func RegisterTwitterRPCServer(s *grpc.Server, srv TwitterRPCServer) {
	s.RegisterService(&_TwitterRPC_serviceDesc, srv)
}

func _TwitterRPC_SignupRPC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TwitterRPCServer).SignupRPC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.TwitterRPC/SignupRPC",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TwitterRPCServer).SignupRPC(ctx, req.(*SignupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TwitterRPC_LoginRPC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TwitterRPCServer).LoginRPC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.TwitterRPC/LoginRPC",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TwitterRPCServer).LoginRPC(ctx, req.(*LoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TwitterRPC_FollowUnFollowRPC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FollowUnFollowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TwitterRPCServer).FollowUnFollowRPC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.TwitterRPC/FollowUnFollowRPC",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TwitterRPCServer).FollowUnFollowRPC(ctx, req.(*FollowUnFollowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TwitterRPC_AddTweetRPC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddTweetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TwitterRPCServer).AddTweetRPC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.TwitterRPC/AddTweetRPC",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TwitterRPCServer).AddTweetRPC(ctx, req.(*AddTweetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _TwitterRPC_serviceDesc = grpc.ServiceDesc{
	ServiceName: "protocol.TwitterRPC",
	HandlerType: (*TwitterRPCServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SignupRPC",
			Handler:    _TwitterRPC_SignupRPC_Handler,
		},
		{
			MethodName: "LoginRPC",
			Handler:    _TwitterRPC_LoginRPC_Handler,
		},
		{
			MethodName: "FollowUnFollowRPC",
			Handler:    _TwitterRPC_FollowUnFollowRPC_Handler,
		},
		{
			MethodName: "AddTweetRPC",
			Handler:    _TwitterRPC_AddTweetRPC_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protocol.proto",
}

func init() { proto.RegisterFile("protocol.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 323 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x92, 0xbd, 0x4e, 0xc3, 0x30,
	0x14, 0x85, 0x69, 0x41, 0x90, 0xde, 0x52, 0x10, 0x86, 0xd2, 0x10, 0x89, 0x1f, 0x79, 0x62, 0xea,
	0x00, 0x1b, 0x12, 0x43, 0xb1, 0x28, 0x0b, 0x43, 0x94, 0xb6, 0x0f, 0x10, 0x12, 0x2b, 0x8a, 0x08,
	0xb1, 0x89, 0x1d, 0x45, 0x7d, 0x1e, 0x5e, 0x14, 0x61, 0xe7, 0xaf, 0x69, 0xa1, 0x55, 0x99, 0xe2,
	0xeb, 0x73, 0xf3, 0xf9, 0xd8, 0xf7, 0xc0, 0x11, 0x4f, 0x98, 0x64, 0x1e, 0x8b, 0x86, 0x6a, 0x81,
	0x8c, 0xa2, 0xc6, 0x2f, 0xd0, 0x9b, 0x84, 0x41, 0x9c, 0x72, 0x87, 0x7e, 0xa6, 0x54, 0x48, 0x64,
	0x81, 0x91, 0x0a, 0x9a, 0xc4, 0xee, 0x07, 0x35, 0x5b, 0x37, 0xad, 0xdb, 0x8e, 0x53, 0xd6, 0x3f,
	0x1a, 0x77, 0x85, 0xc8, 0x58, 0xe2, 0x9b, 0x6d, 0xad, 0x15, 0x35, 0x26, 0xd0, 0x2d, 0x40, 0x3c,
	0x9a, 0xff, 0x89, 0x31, 0xe1, 0x40, 0xa4, 0x9e, 0x47, 0x85, 0x50, 0x14, 0xc3, 0x29, 0x4a, 0x3c,
	0x86, 0xc3, 0x57, 0x16, 0x84, 0xf1, 0x7f, 0xcd, 0x3c, 0x01, 0xe4, 0x9c, 0xed, 0xbd, 0x4c, 0xa0,
	0x3f, 0x66, 0x51, 0xc4, 0xb2, 0x59, 0xac, 0xbf, 0x9b, 0x98, 0xba, 0x02, 0x90, 0x6e, 0x12, 0x50,
	0xa9, 0x54, 0x6d, 0xab, 0xb6, 0x83, 0xdf, 0xe1, 0xb4, 0x09, 0x5d, 0xe7, 0x70, 0x0d, 0xb2, 0x7e,
	0x83, 0xdd, 0xc5, 0x1b, 0x8c, 0xe0, 0x78, 0xe4, 0xfb, 0xd3, 0x8c, 0x52, 0xb9, 0x89, 0x77, 0x04,
	0x7b, 0x9c, 0x09, 0x99, 0x1f, 0xa1, 0xd6, 0xf8, 0x19, 0x7a, 0x15, 0x62, 0xeb, 0xb7, 0xbc, 0xfb,
	0x6a, 0x03, 0x4c, 0xb3, 0x50, 0x4a, 0x9a, 0x38, 0x36, 0x41, 0x8f, 0xd0, 0xc9, 0xb3, 0x62, 0x13,
	0x34, 0x18, 0x96, 0xe1, 0x5c, 0x48, 0xa2, 0xd5, 0x5f, 0x16, 0x78, 0x34, 0xc7, 0x3b, 0xe8, 0x01,
	0x0c, 0x3d, 0x5d, 0x9b, 0xa0, 0xf3, 0xaa, 0xa9, 0x9e, 0x1c, 0xeb, 0x6c, 0x69, 0x5f, 0xff, 0x3b,
	0x83, 0x93, 0xc6, 0x00, 0x6c, 0x82, 0xae, 0xab, 0xe6, 0x95, 0x23, 0xb7, 0x2e, 0x7f, 0x6f, 0xd0,
	0x58, 0x02, 0xdd, 0xf2, 0x9d, 0x6c, 0x82, 0x2e, 0xaa, 0xfe, 0xc6, 0x04, 0xac, 0xc1, 0x2a, 0x49,
	0x41, 0xde, 0xf6, 0x95, 0x72, 0xff, 0x1d, 0x00, 0x00, 0xff, 0xff, 0x95, 0x4d, 0xd8, 0x0b, 0xae,
	0x03, 0x00, 0x00,
}
